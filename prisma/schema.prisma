generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//! User Managment  ---------------------------------------------------------
model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  fullName   String
  phone      String    @unique
  email      String    @unique
  nationalId String    @unique
  joinedAt   DateTime  @default(now())
  image      Image?
  comments   Comment[]
}

model Admin {
  id          Int       @id @default(autoincrement())
  name        String
  displayName String
  password    String
  phone       String    @unique
  email       String    @unique
  role        AdminRole
  joinedAt    DateTime  @default(now())
  image       Image?
  post        Post[]
}

model Tutor {
  id          Int      @id @default(autoincrement())
  name        String
  displayName String
  slug        String
  password    String
  phone       String   @unique
  email       String   @unique
  joinedAt    DateTime @default(now())
  image       Image?
  courses     Course[]
}

enum AdminRole {
  ADMIN
  AUTHOR
}

//! Login ---------------------------------------------------------

model Otp {
  id         String   @id @default(cuid())
  identifier String   @unique
  otpCode    String
  type       OtpType
  expires    DateTime

  @@unique([identifier, otpCode])
}

enum OtpType {
  SMS
  EMAIL
}

//! Files ---------------------------------------------------------

model Image {
  id        Int       @id @default(autoincrement())
  public_id String    @unique
  url       String    @unique
  format    String
  type      ImageType
  size      Int
  createdAt DateTime  @default(now())

  // Relations
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?         @unique
  admin     Admin?       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int?         @unique
  tutor     Tutor?       @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   Int?         @unique
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?         @unique
  course    Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int?         @unique
  gallery   GalleryItem? @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId Int?
}

enum ImageType {
  POST
  COURSE
  ANNOUNCEMENT
  USER
  OTHER

  COURSE_ASSET
  POST_ASSET
  TICKET_ASSET
}

//! Postrs ---------------------------------------------------------

model Post {
  id         Int            @id @default(autoincrement())
  title      String
  url        String         @unique
  content    String         @db.Text
  categories PostCategory[]
  status     PostStatus     @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  comments   Comment[]
  image      Image?
  imageId    Int?
  author     Admin?         @relation(fields: [authorId], references: [id])
  authorId   Int?
}

model PostCategory {
  id    Int    @id @default(autoincrement())
  name  String
  url   String @unique
  posts Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

//! Course ---------------------------------------------------------

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  url         String   @unique
  summary     String   @db.Text
  description String   @db.Text
  tizerUrl    String
  jobMarket   String
  audience    String
  needs       String
  duration    Int
  basePrice   Float
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  categoryId   String //todo
  tutor        Tutor          @relation(fields: [tutorId], references: [id])
  tutorId      Int
  image        Image?
  status       Status
  learn        Learn[]
  prerequisite Prerequisite[]
  discount     Discount?
  curriculum   Curriculum[]
  gallery      GalleryItem?
}

model Learn {
  id       Int    @id @default(autoincrement())
  value    String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model Prerequisite {
  id       Int    @id @default(autoincrement())
  value    String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model Discount {
  id       Int          @id @default(autoincrement())
  amount   Float
  type     DiscountType
  from     DateTime?
  to       DateTime?
  course   Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int          @unique
}

enum DiscountType {
  FIXED
  PERCENT
}

enum Status {
  DRAFT
  PUBLISHED
}

model Curriculum {
  id           Int      @id @default(autoincrement())
  sectionTitle String
  lessons      Lesson[]
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     Int
}

model Lesson {
  id        Int        @id @default(autoincrement())
  title     String
  duration  Int?
  url       String
  isFree    Boolean
  type      LessonType
  section   Curriculum @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int
}

enum LessonType {
  VIDEO
  FILE
  ASSET
}

model GalleryItem {
  id       Int     @id @default(autoincrement())
  image    Image[]
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int     @unique
}
