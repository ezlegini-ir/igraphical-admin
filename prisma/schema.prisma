generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//! User Managment  ---------------------------------------------------------
model User {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  fullName       String
  phone          String           @unique
  email          String           @unique
  nationalId     String           @unique
  joinedAt       DateTime         @default(now())
  image          Image?
  comments       Comment[]
  review         Review[]
  LessonProgress LessonProgress[]
  enrollment     Enrollment[]
  payment        Payment[]
}

model Admin {
  id          Int       @id @default(autoincrement())
  name        String
  displayName String
  password    String
  phone       String    @unique
  email       String    @unique
  role        AdminRole
  joinedAt    DateTime  @default(now())
  image       Image?
  post        Post[]
}

model Tutor {
  id          Int      @id @default(autoincrement())
  name        String
  displayName String
  slug        String
  password    String
  phone       String   @unique
  email       String   @unique
  joinedAt    DateTime @default(now())
  image       Image?
  courses     Course[]
}

enum AdminRole {
  ADMIN
  AUTHOR
}

//! Login ---------------------------------------------------------

model Otp {
  id         String   @id @default(cuid())
  identifier String   @unique
  otpCode    String
  type       OtpType
  expires    DateTime

  @@unique([identifier, otpCode])
}

enum OtpType {
  SMS
  EMAIL
}

//! Files ---------------------------------------------------------

model Image {
  id        Int       @id @default(autoincrement())
  public_id String    @unique
  url       String    @unique
  format    String
  type      ImageType
  size      Int
  createdAt DateTime  @default(now())

  // Relations
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?         @unique
  admin     Admin?       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int?         @unique
  tutor     Tutor?       @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   Int?         @unique
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?         @unique
  course    Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int?         @unique
  gallery   GalleryItem? @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId Int?
  slider    Slider?      @relation(fields: [sliderId], references: [id], onDelete: Cascade)
  sliderId  Int?         @unique
}

enum ImageType {
  POST
  COURSE
  ANNOUNCEMENT
  USER
  SLIDER

  COURSE_ASSET
  POST_ASSET
  TICKET_ASSET

  OTHER
}

//! Posts ---------------------------------------------------------

model Post {
  id         Int            @id @default(autoincrement())
  title      String
  url        String         @unique
  content    String         @db.Text
  categories PostCategory[]
  status     PostStatus     @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  comments   Comment[]
  image      Image?
  imageId    Int?
  author     Admin?         @relation(fields: [authorId], references: [id])
  authorId   Int?
}

model PostCategory {
  id    Int    @id @default(autoincrement())
  name  String
  url   String @unique
  posts Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

//! Course ---------------------------------------------------------

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  url         String   @unique
  summary     String   @db.Text
  description String   @db.Text
  tizerUrl    String
  jobMarket   String
  audience    String
  needs       String
  duration    Int
  basePrice   Float
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  category          CourseCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId        Int?
  tutor             Tutor?          @relation(fields: [tutorId], references: [id], onDelete: SetNull)
  tutorId           Int?
  image             Image?
  status            Status
  learn             Learn[]
  prerequisite      Prerequisite[]
  discount          Discount?
  curriculum        Curriculum[]
  gallery           GalleryItem?
  review            Review[]
  enrollment        Enrollment[]
  includedInCoupons Coupon[]        @relation("IncludesCoupons")
  excludedInCoupons Coupon[]        @relation("ExcludesCoupons")
}

model CourseCategory {
  id      Int      @id @default(autoincrement())
  name    String
  url     String   @unique
  courses Course[]
}

model Learn {
  id       Int    @id @default(autoincrement())
  value    String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model Prerequisite {
  id       Int    @id @default(autoincrement())
  value    String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int
}

model Discount {
  id       Int          @id @default(autoincrement())
  amount   Float
  type     DiscountType
  from     DateTime?
  to       DateTime?
  course   Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int          @unique
}

enum DiscountType {
  FIXED
  PERCENT
}

enum Status {
  DRAFT
  PUBLISHED
}

model Curriculum {
  id           Int      @id @default(autoincrement())
  sectionTitle String
  lessons      Lesson[]
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     Int
}

model Lesson {
  id             Int              @id @default(autoincrement())
  title          String
  duration       Int?
  url            String
  isFree         Boolean
  type           LessonType
  section        Curriculum       @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId      Int
  lessonProgress LessonProgress[]
}

enum LessonType {
  VIDEO
  FILE
  ASSET
}

model LessonProgress {
  id          Int       @id @default(autoincrement())
  completed   Boolean   @default(false)
  completedAt DateTime? @default(now())

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId     Int
  Enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId Int

  @@unique([userId, lessonId])
}

model GalleryItem {
  id       Int     @id @default(autoincrement())
  image    Image[]
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int     @unique
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  rate      Int
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
}

//! Announcement ---------------------------------------------------------

model Slider {
  id     Int        @id @default(autoincrement())
  link   String?
  active Boolean
  type   SliderType
  image  Image?
}

enum SliderType {
  MAIN
  PANEL
}

model Notifbar {
  id        Int     @id @default(autoincrement())
  content   String
  link      String
  bgColor   String
  textColor String
  active    Boolean
}

//! Enrollment ---------------------------------------------------------

model Enrollment {
  id                  Int              @id @default(autoincrement())
  enrolledAt          DateTime         @default(now())
  progress            Float            @default(0)
  completedAt         DateTime?
  status              EnrollmentStatus @default(PENDING)
  price               Float
  courseOriginalPrice Float

  lessonProgress LessonProgress[]
  payment        Payment?         @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId      Int?
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  course         Course           @relation(fields: [courseId], references: [id])
  courseId       Int
  certificate    Certificate?

  @@unique([userId, courseId])
}

model Certificate {
  id       Int      @id @default(autoincrement())
  issuedAt DateTime @default(now())
  url      String   @unique
  serial   String   @unique

  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId Int        @unique
}

enum EnrollmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

//! Payment ---------------------------------------------------------

model Payment {
  id                 Int           @id @default(autoincrement())
  total              Float
  itemsTotal         Float
  discountAmount     Float?
  discountCode       String?
  discountCodeAmount Int?
  transactionId      String?       @unique
  status             PaymentStatus
  paidAt             DateTime      @default(now())
  paymentMethod      PaymentMethod

  enrollment Enrollment[]
  coupon     Coupon?      @relation(fields: [couponId], references: [id])
  couponId   Int?
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
}

enum PaymentMethod {
  ZARRIN_PAL
  MELLI
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

//! MARKETING ---------------------------------------------------------

model Coupon {
  id            Int        @id @default(autoincrement())
  code          String     @unique
  amount        Float
  type          CouponType
  from          DateTime?
  to            DateTime?
  used          Int        @default(0)
  summery       String?
  limit         Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  payment       Payment[]
  courseInclude Course[]   @relation("IncludesCoupons")
  courseExclude Course[]   @relation("ExcludesCoupons")
}

enum CouponType {
  PERCENT
  FIXED
}

model OverallOff {
  id     Int            @id @default(autoincrement())
  amount Float
  active Boolean
  type   OverallOffType
  from   DateTime?
  to     DateTime?
}

enum OverallOffType {
  PERCENT
  FIXED
}
